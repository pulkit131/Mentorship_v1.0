generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum PlanType {
  BASIC
  BEGINNER_TECHY
  PLACEMENT_FOCUSED
}

enum Role {
  USER
  MENTOR
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String   @unique
  profileImage   String?
  role           Role     @default(USER)
  planType       PlanType @default(BASIC)
  planPrice      Int      @default(0)
  freeSessions   Int      @default(4)
  sessionCount   Int      @default(0)
  planStartDate  DateTime?
  planEndDate    DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Session relationships
  sessions        Session[] @relation("UserSessions")
  mentorSessions  Session[] @relation("MentorSessions")

  // Mentorship assignment relationships
  assignedStudents       Assignment[]            @relation("AssignedMentor")
  mentorAssignment       Assignment?             @relation("AssignedStudent")

  // â¬‡ Add these two lines
  mentorshipAssignmentsAsStudent MentorshipAssignment[] @relation("AssignedStudent")
  mentorshipAssignmentsAsMentor  MentorshipAssignment[] @relation("AssignedMentor")

  // Waitlist
  waitlistEntries        WaitlistEntry[]
  waitlistMentorFor      WaitlistEntry[] @relation("MentorWaitlist")
}


model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  mentorId  String   @db.ObjectId
  status    String   @default("pending")
  createdAt DateTime @default(now())

  user   User @relation("UserSessions", fields: [userId], references: [id])
  mentor User @relation("MentorSessions", fields: [mentorId], references: [id])
}

model Plan {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String?
  price       Float    @default(0)
  features    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MentorshipAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId String   @db.ObjectId
  mentorId  String   @db.ObjectId
  createdAt DateTime @default(now())

  student User @relation("AssignedStudent", fields: [studentId], references: [id])
  mentor  User @relation("AssignedMentor", fields: [mentorId], references: [id])
}


model Assignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  studentId String   @unique @db.ObjectId  // One student can only be assigned to one mentor
  mentorId  String   @db.ObjectId
  createdAt DateTime @default(now())

  student User @relation("AssignedStudent", fields: [studentId], references: [id])
  mentor  User @relation("AssignedMentor", fields: [mentorId], references: [id])
}

model WaitlistEntry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  mentorId  String   @db.ObjectId
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  mentor User @relation("MentorWaitlist", fields: [mentorId], references: [id])
}


model BookingRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String
  contact   String
  mentor    String
  createdAt DateTime @default(now())
}

model Payment {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  status             String
  userEmail          String   // email of the user
  planName           String
  subscriptionStarts DateTime @default(now())
  subscriptionEnds   DateTime
  createdAt          DateTime @default(now())
}
